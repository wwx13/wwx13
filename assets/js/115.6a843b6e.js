(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{682:function(e,n,t){"use strict";t.r(n);var s=t(44),r=Object(s.a)({},(function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('栈的后进先出特点可以用于解决匹配任务。\n常见如括号匹配。\n\nclass Solution:\n    def longestValidParentheses(self, s: str) -> int:\n        if not s:\n            return 0\n        stack = []\n\n        max_len = 0\n        former_ed = {}\n        for idx, val in enumerate(s):\n            if val == "(":\n                stack.append(idx)\n            else:\n                ed = idx\n                if not stack:\n                    continue\n                st = stack.pop(-1)\n                if st-1 in  former_ed:\n                    max_len = max(max_len, former_ed[st-1]+ed-st+1)\n                    former_ed[ed] = former_ed[st-1]+ed-st+1\n                else:\n                    max_len = max(ed - st+1, max_len)\n                    former_ed[ed] = ed-st+1\n                # print(former_ed)\n        return max_len\n\n')])])]),n("p",[n("a",{attrs:{href:"https://leetcode.cn/problems/longest-valid-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[this._v("最长匹配括号"),n("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=r.exports}}]);