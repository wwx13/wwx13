(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{678:function(n,e,l){"use strict";l.r(e);var t=l(44),r=Object(t.a)({},(function(){var n=this,e=n.$createElement,l=n._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[l("h1",{attrs:{id:"线段树"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#线段树"}},[n._v("#")]),n._v(" 线段树")]),n._v(" "),l("ol",[l("li",[n._v("线段树的特点")])]),n._v(" "),l("ul",[l("li",[n._v("用数组存储一个满二叉树")]),n._v(" "),l("li",[n._v("叶节点管理长度为1的区间对应于原数组内容， 非叶节点管理某个区间的信息，是增加的信息，原数组没有。")]),n._v(" "),l("li",[n._v("我们建立满二叉树是通过数组存储的，这样就约定我的孩子在数组索引为2i+1, 2i+2; 通常我们开原数组4倍存储满二叉树。\n"),l("ul",[l("li",[n._v("为啥四倍，因为若n是2的指数次，那么由等比数列求和2n就足够存储了，但是如果不是2的指数次，还有余量那么就需要多一层，这一层需要2n的空间加起来就是4n。")])])]),n._v(" "),l("li",[n._v("区间查询： 查询区间递归过程中不变，当当前节点管理区间属于查询区间自己返回信息， 否则，根据交集递归左右查询。")]),n._v(" "),l("li",[n._v("区间修改： 我们只按照查询的方式进行更新，更新为单元素更新值*管理长度，并开个数组存储当前的索引有懒惰值。查询或者区间修改时发现当前节点有懒惰值则下放到对应要接着\n遍历的字数进行更新并标记。")]),n._v(" "),l("li",[n._v("区间查询和修改可以用一个函数实现。")]),n._v(" "),l("li",[n._v("实现时建议定制合并函数。")])]),n._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[n._v("构建的复杂度")])]),n._v(" "),l("p",[n._v("可以推导出构建一棵树的递归方程是T(n)=2T(n/2)+R\n其中R是一个时间常数\n可以试着在图上画出这个线段树，可以计算出树的高度是 log2(n)\n那么按照常规来,第一个节点的时间是T(n)+R\n然后我们再将T(n)分摊给他的两个子节点,可以推出\nT(n)=2T(n/2)+R\n如此迭代下去，可以推出T(n)")]),n._v(" "),l("p",[n._v("T(n)=R+2R+4R+....+R2x-1")]),n._v(" "),l("p",[n._v("然后这个数列的长度是log2(n)\n根据等比数列求和\n可以算出T(n)=(n/2-1)R\n那么时间复杂度就是O(n)")]),n._v(" "),l("p",[n._v("链接：https://www.jianshu.com/p/fac41cc1f2a6")]),n._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[n._v('    class SegmentTree(object):\n        def __init__(self, array, merge_func=None):\n            self.array = array\n            self.st = self.build_st(array, merge_func)\n            self.lazy_tag = [None] * len(self.st)\n            self.merge_func = merge_func\n    \n        def build_st(self, array, merge_func=None):\n            st = [0] * (len(array) * 4)\n    \n            def recursive_build(st_idx, l, r):\n                print(l, st_idx, r)\n                if l == r:\n                    st[st_idx] = array[l]\n                    return st[st_idx]\n                mid = (l + r) // 2\n                left = recursive_build(2 * st_idx + 1, l, mid)\n                right = recursive_build(2 * st_idx + 2, mid+1, r)\n                if merge_func:\n                    merged_val = merge_func(left, right)\n                else:\n                    merged_val = sum([left, right])\n                st[st_idx] = merged_val\n    \n                return merged_val\n    \n            recursive_build(0, 0, len(array)-1)\n            return st\n    \n        def query_or_modify(self, l, r, modify_value=None, merge_func=None):\n            """\n            l: start\n            r: end 不包括.\n            """\n    \n            def recur_query(\n                self, control_l, control_r, st_idx, l, r,\n                modify_value,\n                merge_func=None\n            ):\n                if r-1 < control_l or l > control_r:\n                    if not modify_value:\n                        return None\n                    return self.st[st_idx]\n                print("--\x3e",st_idx, control_l, control_r, l, r, self.lazy_tag)\n                if control_l >= l and control_r < r:\n                    if modify_value:\n                        if merge_func:\n                            self.st[st_idx] = merge_func(\n                                modify_value * (control_r-control_l + 1),\n                                self.st[st_idx])\n                        else:\n                            self.st[st_idx] = sum(\n    \n                                [modify_value * (control_r - control_l + 1),\n                                self.st[st_idx]]\n                            )\n                        self.lay_tag_next_down(st_idx, modify_value)\n                    print("low", st_idx, control_l, control_r, self.st[st_idx])\n                    return self.st[st_idx]\n                if self.lazy_tag[st_idx] is not None:   # lazy tag 下放\n    \n                    self.lay_tag_next_down(st_idx, modify_value)\n                    if merge_func:\n    \n                        self.st[st_idx] = merge_func(\n                            self.lazy_tag[st_idx] * (control_r - control_l + 1),\n                            self.st[st_idx]\n                        )\n                    else:\n                        self.st[st_idx] = sum([\n                            self.lazy_tag[st_idx] * (control_r - control_l + 1),\n                            self.st[st_idx]])\n                    self.lazy_tag[st_idx] = None\n    \n                mid = (control_l + control_r) // 2\n    \n                left = recur_query(self, control_l, mid, 2 * st_idx + 1, l, r,\n                                   modify_value, merge_func)\n    \n                right = recur_query(self, mid + 1, control_r, 2 * st_idx + 2, l, r,\n                                    modify_value, merge_func)\n                print(st_idx, control_l, control_r, left, right,"[pp[")\n                if left and right:\n    \n                    if merge_func:\n                        new_val = merge_func(left, right)\n                        self.st[st_idx] = new_val\n                    else:\n                        new_val = sum([left, right])\n                        self.st[st_idx] = new_val\n                        return new_val\n                if left:\n                    self.st[st_idx] = left\n                    return left\n                if right:\n                    self.st[st_idx] = right\n                    return right\n                return None\n    \n            return recur_query(self, 0, len(self.array) - 1, 0, l, r, modify_value,\n                               merge_func)\n    \n        def lay_tag_next_down(self, st_idx, modify_value):\n            if (2 * st_idx + 1) < len(self.st):\n                self.lazy_tag[2 * st_idx + 1] = modify_value  # 懒惰标记，向上先更新\n            if (2 * st_idx + 1) < len(self.st):\n                self.lazy_tag[2 * st_idx + 2] = modify_value\n\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);