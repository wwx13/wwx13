(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{676:function(n,e,t){"use strict";t.r(e);var s=t(44),a=Object(s.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n\n        def check(pos, already_tagged):\n            for pos_ in already_tagged:\n                if pos_[1] != pos[1] and pos[0]!=pos_[0] and abs((pos[1]-pos_[1])/(pos[0]-pos_[0]))!=1:\n                    pass\n                else:\n                    return False\n            return True\n\n\n        res = []\n        temp_out = []\n        def recur(idx, already_tagged):\n            if idx >=n :\n                if len(already_tagged) == n:\n                    res.append(temp_out.copy())\n                return None\n            for i in range(n):\n                pos = (idx, i)\n                if check(pos, already_tagged):\n                    t = "." * n\n                    t = t[:pos[1]] + "Q" + t[pos[1]+1:]\n                    temp_out.append(t)\n                    already_tagged.append(pos)\n                    recur(idx+1, already_tagged)\n                    already_tagged.pop(-1)\n                    temp_out.pop(-1)\n            return None\n        recur(0, [])\n        return res\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);