(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{489:function(s,a,t){s.exports=t.p+"assets/img/sim_hash.a72e6b60.png"},636:function(s,a,t){"use strict";t.r(a);var h=t(44),r=Object(h.a)({},(function(){var s=this,a=s.$createElement,h=s._self._c||a;return h("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[h("hr"),s._v(" "),h("h1",{attrs:{id:"sim-hash算法"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#sim-hash算法"}},[s._v("#")]),s._v(" Sim Hash算法")]),s._v(" "),h("p",[s._v("simhash算法分为5个步骤：分词、hash、加权、合并、降维，具体过程如下所述：")]),s._v(" "),h("h4",{attrs:{id:"分词"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#分词"}},[s._v("#")]),s._v(" 分词")]),s._v(" "),h("p",[s._v("给定一段语句，进行分词，得到有效的特征向量，然后为每一个特征向量设置1-5等5个级别的权重（如果是给定一个文本，那么特征向量可以是文本中的词，其权重可以是这个词出现的次数）。例如给定一段语句：“CSDN博客结构之法算法之道的作者July”，分词后为：“CSDN 博客 结构 之 法 算法 之 道 的 作者 July”，然后为每个特征向量赋予权值：CSDN(4) 博客(5) 结构(3) 之(1) 法(2) 算法(3) 之(1) 道(2) 的(1) 作者(5) July(5)，其中括号里的数字代表这个单词在整条语句中的重要程度，数字越大代表越重要。")]),s._v(" "),h("h4",{attrs:{id:"hash"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" hash")]),s._v(" "),h("p",[s._v("通过hash函数计算各个特征向量的hash值，hash值为二进制数01组成的n-bit签名。比如“CSDN”的hash值Hash(CSDN)为100101，“博客”的hash值Hash(博客)为“101011”。就这样，字符串就变成了一系列数字。")]),s._v(" "),h("h4",{attrs:{id:"加权"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#加权"}},[s._v("#")]),s._v(" 加权")]),s._v(" "),h("p",[s._v("在hash值的基础上，给所有特征向量进行加权，即W = Hash weight，且遇到1则hash值和权值正相乘，遇到0则hash值和权值负相乘。例如给“CSDN”的hash值“100101”加权得到：W(CSDN) = 1001014 = 4 -4 -4 4 -4 4，给“博客”的hash值“101011”加权得到：W(博客)=101011*5 = 5 -5 5 -5 5 5，其余特征向量类似此般操作。")]),s._v(" "),h("h4",{attrs:{id:"合并"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#合并"}},[s._v("#")]),s._v(" 合并")]),s._v(" "),h("p",[s._v("将上述各个特征向量的加权结果累加，变成只有一个序列串。拿前两个特征向量举例，例如“CSDN”的“4 -4 -4 4 -4 4”和“博客”的“5 -5 5 -5 5 5”进行累加，得到“4+5 -4+-5 -4+5 4+-5 -4+5 4+5”，得到“9 -9 1 -1 1”。")]),s._v(" "),h("h4",{attrs:{id:"降维"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#降维"}},[s._v("#")]),s._v(" 降维")]),s._v(" "),h("p",[s._v("对于n-bit签名的累加结果，如果大于0则置1，否则置0，从而得到该语句的simhash值，最后我们便可以根据不同语句simhash的海明距离来判断它们的相似度。例如把上面计算出来的“9 -9 1 -1 1 9”降维（某位大于0记为1，小于0记为0），得到的01串为：“1 0 1 0 1 1”，从而形成它们的simhash签名。")]),s._v(" "),h("p",[s._v("其流程如下图所示：\n"),h("img",{attrs:{src:t(489),alt:"s"}})]),s._v(" "),h("div",{staticClass:"custom-block tip"},[h("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),h("p",[s._v("计算优化:")]),s._v(" "),h("p",[s._v("1.将64为哈希码分为4份；"),h("br"),s._v("\n2.调整这4段哈希码的位置，分别将这四种情况存储在4分table中；"),h("br"),s._v("\n3.采用精确匹配的方法查找前16位哈希码"),h("br"),s._v("\n4.如果样本库中存有234（差不多10亿）的哈希指纹，则每个table返回2(34−16)=262144个候选结果，大大减少了海明距离的计算成本")])])])}),[],!1,null,null,null);a.default=r.exports}}]);